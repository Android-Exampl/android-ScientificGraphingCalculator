Complex Calculator Documentation
by Neal Master
Coded with the help of byaccj ( http://byaccj.sourceforge.net/ )




Valid Expressions:
      NUM		# a number
      FNCT '(' exp ')' 	# function call
      VAR '=' exp  	# variable assignment
      VAR     		# variable lookup
      exp '+' exp 	# addition
      exp '-' exp 	# subtraction
      exp '*' exp   	# multiplication
      exp '/' exp 	# division
      exp1 'r' exp2 	# exp2-th root of exp1
      exp1 '^' exp2 	# exp1 to the exp2-th power
      '(' exp ')' 	# exp



Valid Values for NUM (examples):
      PI     # The ratio, pi
      I	     # The imaginary unit
      E	     # The transcendental number
      3	     # An integer
      5.66   # A decimal value
      9.3I   # An imaginary number
      -3     # A negative integer
      -5.66  # A negative decimal value
      -9.3I  # A negative imaginary number      

Valid Values for FNCT:
      Exp								# exponetiate with base E
      Conj 								# take complex conjugate
      Log  								# take natural log
      Neg  								# unary negation
      Sin , Cos , Tan , Csc , Sec , Cot , 				# circular trig function
      Sin_d , Cos_d , Tan_d , Csc_d , Sec_d , Cot_d , 			# circular trig function in degrees
      Sinh , Cosh , Tanh , Csch , Sech , Coth , 			# hyperbolic trig function
      Arcsin , Arccos , Arctan , Arccsc , Arcsec , Arccot , 		# inverse circular trig function
      Arcsin_d , Arccos_d , Arctan_d , Arccsc_d , Arcsec_d , Arccot_d , # inverse circular trig function in degrees
      Arcsinh , Arccosh , Arctanh , Arccsch , Arcsech , Arccoth 	# inverse hyperbolic trig function
      

Valid Values for VAR:
      Anything that isn't a FNCT that has at least 2 characters.  This means that PI can be overwritten!
      If a VAR hasn't been initialized, its value is null.  

Other Notes:
      Remember to pad all tokens with white space.
      Look at Main.java for an example.



Sample use of Main.java:

$ java Main
PI
3.141592653589793 + 0.0I
I
0.0 + 1.0I
E
2.718281828459045 + 0.0I
1 r 2
1.0 + 0.0I
4 r 2
2.0 + 0.0I
4 ^ 2
15.999999999999998 + 0.0I
4 ^ 3
63.99999999999998 + 0.0I
x = 3 + I
BAD INPUT TO PARSER
var = 3 + I
3.0 + 1.0I
Log ( var )
1.151292546497023 + 0.3217505543966422I
Exp ( Log ( var ) )
3.0000000000000004 + 1.0000000000000002I
Arcsin_d ( 0.5 )
30.000000000000004 + 9.648735898059821E-15I
Arccos_d ( 0.5 )
59.99999999999999 + -7.347880794884118E-15I

       