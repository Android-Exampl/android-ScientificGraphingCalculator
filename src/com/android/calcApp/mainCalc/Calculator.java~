package calc;

import cliCalc.*;
import java.util.ArrayList;
import java.util.Arrays;

public class Calculator {
    public int oldVal,round,oldViewNum;
    public String viewStr,ans;
    public ArrayList<String> tokens,oldViews,answers;
    public ArrayList<ArrayList<String>> oldTokens;
    public ArrayList<ArrayList<Integer>> oldTokenLens;
    public ArrayList<Integer> tokenLens;
    private Parser par;
    private final String[] fns = { "sin(","cos(","tan(","arcsin(","arccos(","arctan(",
				   "ln(","log(","sqrt(" };
    private final String[] ops = { "+","-","*","/","^","neg" };
    private final String[] constants = { "PI","I","E" };

    public Calculator() {
	this.par = new Parser(false);
	this.viewStr = "";
	this.tokens = new ArrayList<String>();
	this.oldTokens = new ArrayList<ArrayList<String>>();
	this.oldTokenLens = new ArrayList<ArrayList<Integer>>();
	this.tokenLens = new ArrayList<Integer>();
	this.oldViews = new ArrayList<String>();
	this.answers = new ArrayList<String>();
	this.ans = "";
	this.round = 5;
	this.oldViewNum = 0;
	Arrays.sort(fns);
	Arrays.sort(ops);
	Arrays.sort(constants);
    }

    public String execute() {
	ComplexNumber res;
	String inp="";
	try {
	    inp = this.getInputStr();
	    if(inp.length() == 0) inp = "0";
	    par.run(inp);
	    if(par.getError()) {
		inp += " --ERROR";
		return inp;
	    } else res = par.getAns();
	} catch (Exception e) {
 	    inp += " --UNDETECTED ERROR";
	    return inp;
	}
	this.oldTokens.add(this.tokens);
	this.oldTokenLens.add(this.tokenLens);
	this.oldViews.add(this.viewStr);
	this.oldViewNum = 0;
	this.tokens = new ArrayList<String>();
	this.tokenLens = new ArrayList<Integer>();
	res = res.round(this.round);
	this.ans = res+"";
	this.answers.add(ans);
	if(ans.compareTo("INFINITY") == 0) {
	    this.tokens.add("INF");
	    this.tokenLens.add(8);
	} else if(ans.compareTo("NaN") == 0) {
	    this.tokens.add("NaN");
	    this.tokenLens.add(3);
	} else {
	    tokenize(ans);
	}
	this.viewStr = ans;
	// Return input for debugging
	return inp;
    }

    // Given an index, returns the length of the next token and deletes it.
    public int delHelper(int index) {
	int totLen=0;
	for(int i=0;i<tokens.size();i+=1) {
	    if(totLen == index) {
		tokens.remove(i);
		return tokenLens.remove(i);
	    }
	    totLen += tokenLens.get(i);
	}
	return 0;
    }
    
    // Same as above, but for previous token
    public int bspcHelper(int index) {
	int totLen=0;
	if(index == 0) return 0;
	for(int i=0;i<tokens.size();i+=1) {
	    totLen += tokenLens.get(i);
	    if(totLen == index) {
		tokens.remove(i);
		return tokenLens.remove(i);
	    }
	}
	tokens.remove(tokenLens.size()-1);
	return tokenLens.remove(tokenLens.size()-1);
    }

    public void lastInp() {
	if(this.oldViews.size() > 0) {
	    if(this.oldViewNum >= this.oldViews.size()) this.oldViewNum = 0;
	    this.oldViewNum += 1;
	    this.tokens = this.oldTokens.get(this.oldViews.size()-oldViewNum);
	    this.viewStr = this.oldViews.get(this.oldViews.size()-oldViewNum);
	    this.tokenLens = this.oldTokenLens.get(this.oldViews.size()-oldViewNum);
	}
    }
    
    public void addToken(String t, int len) {
	this.tokens.add(t);
	this.tokenLens.add(len);
    }

    public void tokenize(String t) {
	if(t.compareTo("INFINITY") == 0) {
	    this.tokens.add("INF");
	    this.tokenLens.add(8);
	} else if(t.compareTo("NaN") == 0) {
	    this.tokens.add("NaN");
	    this.tokenLens.add(3);
	} else {
	    for(int i=0;i<t.length();i+=1) {
		if(i == 0 && t.charAt(i) == '-') {
		    this.tokens.add("neg");
		    this.tokenLens.add(1);
		} else {
		    this.tokens.add(t.charAt(i)+"");
		    this.tokenLens.add(1);
		}
	    }
	}
	//this.tokens.add(" ");
    }

    public String getInputStr() {
	String token="",inpStr="";
	int nparens = 0;
	for(int i=0;i<this.tokens.size();i+=1) {
	    token = this.tokens.get(i);
	    if(token.compareTo("sin(") == 0) {
		nparens += 1;
		inpStr += " Sin ( ";
	    } else if(token.compareTo("cos(") == 0) {
		nparens += 1;
		inpStr += " Cos ( ";
	    } else if(token.compareTo("tan(") == 0) {
		nparens += 1;
		inpStr += " Tan ( ";
	    } else if(token.compareTo("arcsin(") == 0) {
		nparens += 1;
		inpStr += " Arcsin ( ";
	    } else if(token.compareTo("arccos(") == 0) {
		nparens += 1;
		inpStr += " Arccos ( ";
	    } else if(token.compareTo("arctan(") == 0) {
		nparens += 1;
		inpStr += " Arctan ( ";
	    } else if(token.compareTo("0") == 0) {
		inpStr += "0";
	    } else if(token.compareTo("1") == 0) {
		inpStr += "1";
	    } else if(token.compareTo("2") == 0) {
		inpStr += "2";
	    } else if(token.compareTo("3") == 0) {
		inpStr += "3";
	    } else if(token.compareTo("4") == 0) {
		inpStr += "4";
	    } else if(token.compareTo("5") == 0) {
		inpStr += "5";
	    } else if(token.compareTo("6") == 0) {
		inpStr += "6";
	    } else if(token.compareTo("7") == 0) {
		inpStr += "7";
	    } else if(token.compareTo("8") == 0) {
		inpStr += "8";
	    } else if(token.compareTo("9") == 0) {
		inpStr += "9";
	    } else if(token.compareTo(".") == 0) {
		inpStr += ".";
	    }  else if(token.compareTo("+") == 0) {
		inpStr += " + ";
	    }  else if(token.compareTo("-") == 0) {
		inpStr += " - ";
	    }  else if(token.compareTo("/") == 0) {
		inpStr += " / ";
	    }  else if(token.compareTo("*") == 0) {
		inpStr += " * ";
	    }  else if(token.compareTo("(") == 0) {
		inpStr += " ( ";
		nparens += 1;
	    }  else if(token.compareTo(")") == 0) {
		inpStr += " ) ";
		nparens -= 1;
	    }  else if(token.compareTo(" ") == 0) {
		inpStr += " ";
	    }  else if(token.compareTo("^") == 0) {
		inpStr += " ^ ";
	    }  else if(token.compareTo("PI") == 0) {
		inpStr += " PI ";
	    }  else if(token.compareTo("I") == 0) {
		inpStr += " I ";
	    }   else if(token.compareTo("e") == 0) {
		inpStr += " E ";
	    }	else if(token.compareTo("E") == 0) {
		    inpStr += "10 ^ ";
	    }  else if(token.compareTo("!") == 0) {
		inpStr += "";
	    }  else if(token.compareTo("log(") == 0) {
		nparens += 1;
		inpStr += " Log ( ";
	    }  else if(token.compareTo("neg") == 0) {
		inpStr += " -";
	    }  else if(token.compareTo("sqrt(") == 0) {
		//nparens += 1;
		//inpStr += "";
	    }
	    if(i < this.tokens.size()-1) {
		if(isReg(token) && (isFn(this.tokens.get(i+1)) || isConstant(this.tokens.get(i+1))))
		   inpStr += " * ";
	    }
	}
	for(int i=0;i<nparens;i+=1) {
	    inpStr += " ) ";
	}
	inpStr.replace("  "," ");
	return inpStr;
    }

    public boolean isReg(String s) {
	return !isFn(s) && !isConstant(s) && !isOp(s);
    }

    public boolean isFn(String s) {
	if(Arrays.binarySearch(fns,s) >= 0) {
	    return true;
	} else {
	    return false;
	}
    }
    
    public boolean isConstant(String s) {
	if(Arrays.binarySearch(constants,s) >= 0) {
	    return true;
	} else {
	    return false;
	}
    }

    public boolean isOp(String s) {
	if(Arrays.binarySearch(ops,s) >= 0) {
	    return true;
	} else {
	    return false;
	}
    }

}